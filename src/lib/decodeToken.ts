import { jwtDecode } from 'jwt-decode'

import AuthService from '@/services/auth.service'

import useAuthStore from '@/stores/auth.store'

import { TokenPayload } from '@/types/auth.type'

export const decodeToken = (token: string) => {
  return jwtDecode(token) as TokenPayload
}

export const checkAndRefreshToken = async (param?: {
  onError?: () => void
  onSuccess?: () => void
  force?: boolean
}) => {
  // Kh√¥ng n√™n ƒë∆∞a logic l·∫•y access v√† refresh token ra kh·ªèi c√°i function `checkAndRefreshToken`
  // V√¨ ƒë·ªÉ m·ªói l·∫ßn m√† checkAndRefreshToken() ƒë∆∞·ª£c g·ªçi th√¨ s·∫Ω c√≥ m·ªôt access v√† refresh token m·ªõi
  // Tr√°nh hi·ªán t∆∞·ª£ng bug n√≥ l·∫•y access v√† refresh token c≈© ·ªü l·∫ßn ƒë·∫ßu r·ªìi g·ªçi cho c√°c l·∫ßn ti·∫øp theo
  const { token, login, logout } = useAuthStore.getState()
  const { accessToken, refreshToken } = token || {}

  // Ch∆∞a ƒëƒÉng nh·∫≠p th√¨ c≈©ng kh√¥ng cho ch·∫°y
  if (!accessToken || !refreshToken) return
  const decodedAccessToken = decodeToken(accessToken)
  const decodedRefreshToken = decodeToken(refreshToken)

  // Th·ªùi ƒëi·ªÉm h·∫øt h·∫°n c·ªßa token l√† t√≠nh theo epoch time (s)
  // C√≤n khi d√πng c√∫ ph√°p new Date().getTime() th√¨ n√≥ s·∫Ω tr·∫£ v·ªÅ epoch time (ms)
  const now = Math.round(new Date().getTime() / 1000)
  // Tr∆∞·ªùng h·ª£p refresh token h·∫øt h·∫°n th√¨ cho logout
  if (decodedRefreshToken.exp <= now) {
    logout()
    return param?.onError && param.onError()
  }
  // V√≠ d·ª• access token c·ªßa ch√∫ng ta c√≥ th·ªùi gian h·∫øt h·∫°n l√† 10s
  // th√¨ m√¨nh s·∫Ω ki·ªÉm tra c√≤n 1/3 th·ªùi gian (3s) th√¨ m√¨nh s·∫Ω cho refresh token l·∫°i
  // Th·ªùi gian c√≤n l·∫°i s·∫Ω t√≠nh d·ª±a tr√™n c√¥ng th·ª©c: decodedAccessToken.exp - now
  // Th·ªùi gian h·∫øt h·∫°n c·ªßa access token d·ª±a tr√™n c√¥ng th·ª©c: decodedAccessToken.exp - decodedAccessToken.iat
  if (
    param?.force ||
    decodedAccessToken.exp - now < (decodedAccessToken.exp - decodedAccessToken.iat) / 3
    // decodedAccessToken.exp - now < 3572 // test 10s g·ªçi 1 l·∫ßn
  ) {
    // G·ªçi API refresh token
    try {
      // G·ªçi API refresh token
      const result = await AuthService.refreshToken()
      login(result.payload)
      return param?.onSuccess && param.onSuccess()
    } catch (error) {
      console.log('üöÄ ~ file: decodeToken.ts:53 ~ error:', error)
      return param?.onError && param.onError()
    }
  }
}
