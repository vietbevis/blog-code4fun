/* eslint-disable @typescript-eslint/no-unused-vars */
import { redirect } from 'next/navigation'

import envConfig from '@/configs/envConfig'

import useAuthStore from '@/stores/auth.store'

import ROUTES from '@/constants/route'

/* eslint-disable @typescript-eslint/no-explicit-any */
type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'

export type RequestOptions = Omit<RequestInit, 'method'> & {
  baseUrl?: string | undefined
}

export class HttpError extends Error {
  status: number
  payload: {
    message: string
    [key: string]: any
  }
  constructor({
    status,
    payload,
    message = 'L·ªói HTTP'
  }: {
    status: number
    payload: any
    message?: string
  }) {
    super(message)
    this.status = status
    this.payload = payload
  }
}

export const normalizePath = (path: string) => (path.startsWith('/') ? path.slice(1) : path)

// Body
// N·∫øu options.body l√† FormData th√¨ body = options.body
// N·∫øu options.body kh√¥ng ph·∫£i l√† FormData th√¨ chuy·ªÉn options.body th√†nh JSON
const handleBodyData = (body?: any): FormData | string | undefined => {
  if (body instanceof FormData) return body
  if (body) return JSON.stringify(body)
  return undefined
}

const getBaseHeaders = (body: any): Record<string, string> => ({
  ...(!(body instanceof FormData) && { 'Content-Type': 'application/json' })
})

export const isClient = typeof window !== 'undefined'

const getAuthorizationHeader = (): string | undefined => {
  const token = isClient ? useAuthStore.getState().token?.accessToken : undefined
  return token ? `Bearer ${token}` : undefined
}

// N·∫øu kh√¥ng truy·ªÅn baseUrl (ho·∫∑c baseUrl = undefined) th√¨ l·∫•y t·ª´ process.env.NEXT_PUBLIC_API_ENDPOINT
// N·∫øu truy·ªÅn baseUrl th√¨ l·∫•y gi√° tr·ªã truy·ªÅn v√†o, truy·ªÅn v√†o '' th√¨ ƒë·ªìng nghƒ©a v·ªõi vi·ªác ch√∫ng ta g·ªçi API ƒë·∫øn Next.js Server
const getFullUrl = (url: string, baseUrl?: string) =>
  `${baseUrl ?? envConfig.NEXT_PUBLIC_API_ENDPOINT}/${normalizePath(url)}`

let clientLogoutRequest: null | Promise<any> = null
const request = async <Response>(
  method: HttpMethod,
  url: string,
  options?: RequestOptions | undefined
) => {
  const body = handleBodyData(options?.body)
  const authorizationHeader = getAuthorizationHeader()
  const headers: HeadersInit = {
    ...getBaseHeaders(body),
    ...options?.headers,
    ...(authorizationHeader && {
      Authorization: authorizationHeader
    })
  }

  const response = await fetch(getFullUrl(url, options?.baseUrl), {
    method,
    ...options,
    headers,
    body
  })

  const payload: Response = await response.json()

  const data = {
    status: response.status,
    payload
  }
  console.log('üöÄ ~ file: http.ts:94 ~ data:', data)

  if (!response.ok) {
    if (response.status === 401) {
      if (isClient) {
        if (!clientLogoutRequest) {
          clientLogoutRequest = fetch(ROUTES.HANDLER.LOGOUT, {
            method: 'PUT',
            body: null, // Logout lu√¥n lu√¥n th√†nh c√¥ng
            headers
          })
          try {
            await clientLogoutRequest
            // eslint-disable-next-line unused-imports/no-unused-vars
          } catch (error) {
          } finally {
            useAuthStore.getState().logout()
            clientLogoutRequest = null
            // Redirect v·ªÅ trang login c√≥ th·ªÉ d·∫´n ƒë·∫øn loop v√¥ h·∫°n
            // N·∫øu kh√¥ng kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng c√°ch
            // V√¨ n·∫øu r∆°i v√†o tr∆∞·ªùng h·ª£p t·∫°i trang Login, ch√∫ng ta c√≥ g·ªçi c√°c API c·∫ßn access token
            // M√† access token ƒë√£ b·ªã x√≥a th√¨ n√≥ l·∫°i nh·∫£y v√†o ƒë√¢y, v√† c·ª© th·∫ø n√≥ s·∫Ω b·ªã l·∫∑p
            location.href = ROUTES.LOGIN
          }
        }
      } else {
        // ƒê√¢y l√† tr∆∞·ªùng h·ª£p khi m√† ch√∫ng ta v·∫´n c√≤n access token (c√≤n h·∫°n)
        // V√† ch√∫ng ta g·ªçi API ·ªü Next.js Server (Route Handler, Server Component) ƒë·∫øn Server Backend
        const accessToken = (options?.headers as any)?.Authorization.split('Bearer ')[1]
        redirect(`/login?accessToken=${accessToken}`)
      }
    } else throw new HttpError(data)
  }

  return data
}

const http = {
  get<Response>(url: string, options?: Omit<RequestOptions, 'body'>) {
    return request<Response>('GET', url, options)
  },
  post<Response>(url: string, body: any, options?: Omit<RequestOptions, 'body'>) {
    return request<Response>('POST', url, { ...options, body })
  },
  put<Response>(url: string, body: any, options?: Omit<RequestOptions, 'body'>) {
    return request<Response>('PUT', url, { ...options, body })
  },
  delete<Response>(url: string, options?: Omit<RequestOptions, 'body'>) {
    return request<Response>('DELETE', url, options)
  }
}
export default http
